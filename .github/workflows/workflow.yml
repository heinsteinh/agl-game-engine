name: AGL Game Engine CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  BUILD_TYPE: Release

jobs:
  build-gamelib:
    name: Build GameLib on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest]
        include:
          - os: ubuntu-latest
            generator: "Unix Makefiles"
            install_deps: |
              sudo apt-get update
              sudo apt-get install -y \
                build-essential \
                cmake \
                libgl1-mesa-dev \
                libglu1-mesa-dev \
                libx11-dev \
                libxrandr-dev \
                libxinerama-dev \
                libxcursor-dev \
                libxi-dev
          - os: macos-latest
            generator: "Unix Makefiles"
            install_deps: ""

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install dependencies
      if: matrix.install_deps != ''
      run: ${{ matrix.install_deps }}

    - name: Setup CMake
      uses: jwlawson/actions-setup-cmake@v2
      with:
        cmake-version: '3.16'

    - name: Configure CMake
      run: |
        cmake -B build \
          -G "${{ matrix.generator }}" \
          -DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE }} \
          -DCMAKE_INSTALL_PREFIX=install

    - name: Build GameLib and Sandbox
      run: cmake --build build --parallel $(nproc)

    - name: Install project
      run: cmake --install build

    - name: Test library linking
      run: |
        echo "Checking if gamelib was built successfully..."
        ls -la build/lib/

        echo "Checking if sandbox demos were built..."
        ls -la build/bin/

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: agl-engine-${{ matrix.os }}-${{ env.BUILD_TYPE }}
        path: |
          build/bin/
          build/lib/
          build/install/
        retention-days: 7

  sandbox-demos:
    name: Build All Sandbox Demos on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest]
        demo: [renderer, texture, benchmark_deltatime, example_logger]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install dependencies (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          build-essential \
          cmake \
          libgl1-mesa-dev \
          libglu1-mesa-dev \
          libx11-dev \
          libxrandr-dev \
          libxinerama-dev \
          libxcursor-dev \
          libxi-dev

    - name: Setup CMake
      uses: jwlawson/actions-setup-cmake@v2
      with:
        cmake-version: '3.16'

    - name: Build Specific Demo
      run: |
        cmake -B build \
          -DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE }}

        # Build the entire project (gamelib + sandbox with default demo)
        cmake --build build --parallel $(nproc)

        # Build specific demo
        cd sandbox
        cmake -B demo_build \
          -DDEMO_NAME=${{ matrix.demo }} \
          -DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE }}
        cmake --build demo_build --parallel $(nproc)

    - name: Test Demo Executable
      run: |
        echo "Testing demo executable exists..."
        ls -la sandbox/demo_build/bin/agl_${{ matrix.demo }}_demo*

        # Basic executable test (check if it runs and exits properly)
        echo "Running basic executable test..."
        timeout 5s sandbox/demo_build/bin/agl_${{ matrix.demo }}_demo* --help || echo "Demo executable test completed"

    - name: Upload demo artifacts
      uses: actions/upload-artifact@v4
      with:
        name: agl-${{ matrix.demo }}-demo-${{ matrix.os }}-${{ env.BUILD_TYPE }}
        path: |
          sandbox/demo_build/bin/
        retention-days: 7

  code-quality:
    name: Code Quality Checks
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Python for pre-commit
      uses: actions/setup-python@v4
      with:
        python-version: '3.x'

    - name: Install pre-commit
      run: pip install pre-commit

    - name: Run pre-commit hooks
      run: pre-commit run --all-files

    - name: Check CMake formatting
      run: |
        if command -v cmake-format &> /dev/null; then
          find . -name "CMakeLists.txt" -o -name "*.cmake" | xargs cmake-format --check
        else
          echo "cmake-format not available, skipping..."
        fi

    - name: Check code structure
      run: |
        echo "=== Code Structure Analysis ==="

        echo "GameLib source files:"
        find gamelib/src -name "*.cpp" | wc -l | xargs echo "  CPP files:"
        find gamelib/include -name "*.h" | wc -l | xargs echo "  Header files:"

        echo ""
        echo "Sandbox demo files:"
        find sandbox/src -name "*_demo.cpp" | wc -l | xargs echo "  Demo files:"

        echo ""
        echo "Available demos:"
        ls sandbox/src/*_demo.cpp | sed 's/.*\///;s/_demo.cpp//' | sed 's/^/  - /'

        echo ""
        echo "Documentation files:"
        find docs -name "*.md" 2>/dev/null | wc -l | xargs echo "  Markdown files:" || echo "  No docs directory found"

  library-tests:
    name: Library Integration Tests
    runs-on: ubuntu-latest
    needs: build-gamelib

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          build-essential \
          cmake \
          libgl1-mesa-dev \
          libglu1-mesa-dev \
          libx11-dev \
          libxrandr-dev \
          libxinerama-dev \
          libxcursor-dev \
          libxi-dev

    - name: Setup CMake
      uses: jwlawson/actions-setup-cmake@v2
      with:
        cmake-version: '3.16'

    - name: Test GameLib Library Linking
      run: |
        # Create a simple test program that uses gamelib
        mkdir -p test_integration
        cd test_integration

        cat > test_gamelib.cpp << 'EOF'
        #include "agl.h"

        class TestApp : public agl::Game {
        public:
            void OnUpdate(float deltaTime) override {
                static float timer = 0.0f;
                timer += deltaTime;
                if (timer >= 1.0f) {
                    AGL_INFO("Test app running for {:.1f} seconds", timer);
                    // Exit after 1 second for testing
                    exit(0);
                }
            }
        };

        int main() {
            AGL_INFO("Starting GameLib integration test...");
            TestApp app;
            if (app.Initialize(800, 600, "GameLib Test")) {
                AGL_INFO("GameLib initialized successfully!");
                app.Run();
                return 0;
            } else {
                AGL_ERROR("Failed to initialize GameLib!");
                return 1;
            }
        }
        EOF

        cat > CMakeLists.txt << 'EOF'
        cmake_minimum_required(VERSION 3.14)
        project(GameLibTest)

        set(CMAKE_CXX_STANDARD 17)

        # Add the parent project
        add_subdirectory(.. gamelib_build)

        add_executable(test_gamelib test_gamelib.cpp)
        target_link_libraries(test_gamelib PRIVATE gamelib)
        EOF

        # Build the test
        cmake -B build -DCMAKE_BUILD_TYPE=Release
        cmake --build build

        echo "Integration test build completed successfully!"

        # Test that the executable exists
        ls -la build/test_gamelib
        echo "GameLib integration test passed!"

  documentation:
    name: Generate Documentation
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Doxygen
      run: |
        sudo apt-get update
        sudo apt-get install -y doxygen graphviz

    - name: Generate documentation
      run: |
        # Create a comprehensive Doxygen config
        cat > Doxyfile << 'EOF'
        PROJECT_NAME = "AGL Game Engine"
        PROJECT_NUMBER = "v1.0"
        PROJECT_BRIEF = "A modern C++ game engine with OpenGL rendering"

        INPUT = gamelib/include/ gamelib/src/ sandbox/src/ README.md docs/
        OUTPUT_DIRECTORY = docs/generated

        GENERATE_HTML = YES
        GENERATE_LATEX = NO
        GENERATE_XML = YES

        RECURSIVE = YES
        EXTRACT_ALL = YES
        EXTRACT_PRIVATE = YES
        EXTRACT_STATIC = YES
        EXTRACT_LOCAL_CLASSES = YES

        USE_MDFILE_AS_MAINPAGE = README.md

        # Include path for dependencies
        INCLUDE_PATH = gamelib/include/

        # File patterns
        FILE_PATTERNS = *.h *.hpp *.cpp *.md

        # Source browser
        SOURCE_BROWSER = YES
        INLINE_SOURCES = YES

        # Diagrams
        HAVE_DOT = YES
        CLASS_DIAGRAMS = YES
        CLASS_GRAPH = YES
        COLLABORATION_GRAPH = YES
        INCLUDE_GRAPH = YES
        INCLUDED_BY_GRAPH = YES
        CALL_GRAPH = YES
        CALLER_GRAPH = YES

        # HTML output customization
        HTML_OUTPUT = html
        HTML_FILE_EXTENSION = .html
        HTML_HEADER =
        HTML_FOOTER =
        HTML_EXTRA_STYLESHEET =

        # Enable search engine
        SEARCHENGINE = YES
        SERVER_BASED_SEARCH = NO

        # Warnings
        QUIET = NO
        WARNINGS = YES
        WARN_IF_UNDOCUMENTED = YES
        WARN_IF_DOC_ERROR = YES

        # Examples
        EXAMPLE_PATH = sandbox/src/
        EXAMPLE_PATTERNS = *_demo.cpp
        EXAMPLE_RECURSIVE = YES
        EOF

        # Generate documentation
        doxygen Doxyfile

        # Create a README for the docs
        cat > docs/generated/html/README.md << 'EOF'
        # AGL Game Engine Documentation

        This documentation was automatically generated from the source code.

        ## Project Structure
        - **gamelib/**: Core game engine library
        - **sandbox/**: Demo applications and examples

        ## Key Components
        - Game loop and timing system
        - OpenGL renderer
        - Input handling
        - Logging system (spdlog)
        - ImGui integration

        ## Building
        See the main README.md for build instructions.
        EOF

    - name: Deploy to GitHub Pages
      uses: peaceiris/actions-gh-pages@v3
      if: github.ref == 'refs/heads/main'
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./docs/generated/html

  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [build-gamelib, sandbox-demos]
    if: startsWith(github.ref, 'refs/tags/v')

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts

    - name: Create release archives
      run: |
        cd artifacts
        for dir in */; do
          archive_name="${dir%/}.zip"
          zip -r "../$archive_name" "$dir"
        done
        cd ..

    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        files: '*.zip'
        draft: false
        prerelease: false
        generate_release_notes: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  performance-test:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: build-gamelib

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: agl-engine-ubuntu-latest-${{ env.BUILD_TYPE }}
        path: build

    - name: Run performance tests
      run: |
        # Make executable if needed
        chmod +x build/bin/* || true

        # Create a comprehensive performance test script
        cat > perf_test.sh << 'EOF'
        #!/bin/bash
        echo "=== AGL Game Engine Performance Tests ==="

        # Test build artifacts
        echo "1. Checking build artifacts..."
        echo "GameLib library:"
        ls -la build/lib/libagl_gamelib.a 2>/dev/null || echo "  - Static library not found"

        echo "Demo executables:"
        ls -la build/bin/agl_*_demo* 2>/dev/null || echo "  - No demo executables found"

        # Test library size and dependencies
        echo ""
        echo "2. Library analysis..."
        if [ -f "build/lib/libagl_gamelib.a" ]; then
          size_kb=$(du -k build/lib/libagl_gamelib.a | cut -f1)
          echo "  - GameLib size: ${size_kb} KB"

          # Check library symbols
          nm build/lib/libagl_gamelib.a | grep -E "^[0-9a-fA-F]+ [TtWw]" | wc -l | \
            xargs echo "  - Exported symbols:"
        fi

        # Test memory and startup performance (basic checks)
        echo ""
        echo "3. Basic executable tests..."
        for demo in build/bin/agl_*_demo*; do
          if [ -x "$demo" ]; then
            echo "  - Testing $(basename $demo)..."
            timeout 3s "$demo" --version 2>/dev/null || echo "    Basic test completed"
          fi
        done

        echo ""
        echo "=== Performance tests completed ==="
        EOF

        chmod +x perf_test.sh
        ./perf_test.sh
