name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  BUILD_TYPE: Release  # Changed from Debug to Release

jobs:
  build:
    name: Build on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        include:
          - os: ubuntu-latest
            generator: "Unix Makefiles"
            install_deps: |
              sudo apt-get update
              sudo apt-get install -y \
                build-essential \
                cmake \
                libgl1-mesa-dev \
                libglu1-mesa-dev \
                libx11-dev \
                libxrandr-dev \
                libxinerama-dev \
                libxcursor-dev \
                libxi-dev
          - os: windows-latest
            generator: "Visual Studio 17 2022"
            install_deps: ""
          - os: macos-latest
            generator: "Unix Makefiles"
            install_deps: ""

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install dependencies
      if: matrix.install_deps != ''
      run: ${{ matrix.install_deps }}

    - name: Setup CMake
      uses: jwlawson/actions-setup-cmake@v1.14
      with:
        cmake-version: '3.14'

    - name: Create build directory
      run: mkdir build

    - name: Configure CMake (Windows)
      if: runner.os == 'Windows'
      working-directory: build
      run: |
        cmake .. -G "${{ matrix.generator }}" -DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE }} -DCMAKE_INSTALL_PREFIX=install

    - name: Configure CMake (Unix)
      if: runner.os != 'Windows'
      working-directory: build
      run: |
        cmake .. \
          -G "${{ matrix.generator }}" \
          -DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE }} \
          -DCMAKE_INSTALL_PREFIX=install

    - name: Build project (Windows)
      if: runner.os == 'Windows'
      working-directory: build
      run: cmake --build . --config ${{ env.BUILD_TYPE }} --parallel 2

    - name: Build project (Unix)
      if: runner.os != 'Windows'
      working-directory: build
      run: cmake --build . --parallel 2

    - name: Install project (Windows)
      if: runner.os == 'Windows'
      working-directory: build
      run: cmake --install . --config ${{ env.BUILD_TYPE }}

    - name: Install project (Unix)
      if: runner.os != 'Windows'
      working-directory: build
      run: cmake --install .

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: agl-engine-${{ matrix.os }}-${{ env.BUILD_TYPE }}
        path: |
          build/bin/
          build/lib/
          build/install/
        retention-days: 7

  sandbox-build:
    name: Build Sandbox on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install dependencies (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          build-essential \
          cmake \
          libgl1-mesa-dev \
          libglu1-mesa-dev \
          libx11-dev \
          libxrandr-dev \
          libxinerama-dev \
          libxcursor-dev \
          libxi-dev

    - name: Setup CMake
      uses: jwlawson/actions-setup-cmake@v1.14
      with:
        cmake-version: '3.14'

    - name: Build Sandbox - Renderer Demo (Windows)
      if: runner.os == 'Windows'
      working-directory: sandbox
      run: |
        mkdir build
        cd build
        cmake .. -DDEMO_NAME=renderer
        cmake --build . --config ${{ env.BUILD_TYPE }}

    - name: Build Sandbox - Renderer Demo (Unix)
      if: runner.os != 'Windows'
      working-directory: sandbox
      run: |
        mkdir build
        cd build
        cmake .. -DDEMO_NAME=renderer -DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE }}
        cmake --build .

    - name: Upload sandbox artifacts
      uses: actions/upload-artifact@v4
      with:
        name: agl-sandbox-${{ matrix.os }}-${{ env.BUILD_TYPE }}
        path: sandbox/build/bin/
        retention-days: 7

  code-quality:
    name: Code Quality Checks
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Python for pre-commit
      uses: actions/setup-python@v4
      with:
        python-version: '3.x'

    - name: Install pre-commit
      run: pip install pre-commit

    - name: Run pre-commit hooks
      run: pre-commit run --all-files

    - name: Check CMake formatting
      run: |
        if command -v cmake-format &> /dev/null; then
          find . -name "CMakeLists.txt" -o -name "*.cmake" | xargs cmake-format --check
        else
          echo "cmake-format not available, skipping..."
        fi

  documentation:
    name: Generate Documentation
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Doxygen
      run: |
        sudo apt-get update
        sudo apt-get install -y doxygen graphviz

    - name: Generate documentation
      run: |
        # Create a basic Doxygen config if it doesn't exist
        if [ ! -f "Doxyfile" ]; then
          echo "Creating basic Doxygen configuration..."
          cat > Doxyfile << EOF
        PROJECT_NAME = "AGL Game Engine"
        INPUT = include/ src/ README.md
        OUTPUT_DIRECTORY = docs
        GENERATE_HTML = YES
        GENERATE_LATEX = NO
        RECURSIVE = YES
        EXTRACT_ALL = YES
        EXTRACT_PRIVATE = YES
        EXTRACT_STATIC = YES
        USE_MDFILE_AS_MAINPAGE = README.md
        EOF
        fi
        doxygen Doxyfile

    - name: Deploy to GitHub Pages
      uses: peaceiris/actions-gh-pages@v3
      if: github.ref == 'refs/heads/main'
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./docs/html

  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [build, sandbox-build]
    if: startsWith(github.ref, 'refs/tags/v')

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts

    - name: Create release archives
      run: |
        cd artifacts
        for dir in */; do
          archive_name="${dir%/}.zip"
          zip -r "../$archive_name" "$dir"
        done
        cd ..

    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        files: '*.zip'
        draft: false
        prerelease: false
        generate_release_notes: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  performance-test:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: build

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: agl-engine-ubuntu-latest-${{ env.BUILD_TYPE }}
        path: build

    - name: Run performance tests
      run: |
        # Make executable if needed
        chmod +x build/bin/* || true
        
        # Create a simple performance test script
        cat > perf_test.sh << 'EOF'
        #!/bin/bash
        echo "Running basic performance tests..."
        
        # Test build time (already built, so this is informational)
        echo "Build completed successfully"
        
        # Test memory usage (if we had actual tests)
        echo "Memory usage tests would go here"
        
        # Test startup time (if we had actual executable tests)
        echo "Startup time tests would go here"
        
        echo "Performance tests completed"
        EOF
        
        chmod +x perf_test.sh
        ./perf_test.sh